        -:    0:Source:/usr/include/c++/11/bits/fs_path.h
        -:    0:Graph:/home/peter/CLionProjects/CRC_HACK/cmake-build-debug-coverage/CMakeFiles/Main.dir/crc.cpp.gcno
        -:    0:Data:/home/peter/CLionProjects/CRC_HACK/cmake-build-debug-coverage/CMakeFiles/Main.dir/crc.cpp.gcda
        -:    0:Runs:3
        -:    1:// Class filesystem::path -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2014-2021 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file include/bits/fs_path.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{filesystem}
        -:   28: */
        -:   29:
        -:   30:#ifndef _GLIBCXX_FS_PATH_H
        -:   31:#define _GLIBCXX_FS_PATH_H 1
        -:   32:
        -:   33:#if __cplusplus >= 201703L
        -:   34:
        -:   35:#include <utility>
        -:   36:#include <type_traits>
        -:   37:#include <locale>
        -:   38:#include <iosfwd>
        -:   39:#include <iomanip>
        -:   40:#include <codecvt>
        -:   41:#include <string_view>
        -:   42:#include <system_error>
        -:   43:#include <bits/stl_algobase.h>
        -:   44:#include <bits/locale_conv.h>
        -:   45:#include <ext/concurrence.h>
        -:   46:#include <bits/shared_ptr.h>
        -:   47:#include <bits/unique_ptr.h>
        -:   48:
        -:   49:#if __cplusplus > 201703L
        -:   50:# include <compare>
        -:   51:#endif
        -:   52:
        -:   53:#if defined(_WIN32) && !defined(__CYGWIN__)
        -:   54:# define _GLIBCXX_FILESYSTEM_IS_WINDOWS 1
        -:   55:# include <algorithm>
        -:   56:#endif
        -:   57:
        -:   58:namespace std _GLIBCXX_VISIBILITY(default)
        -:   59:{
        -:   60:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   61:
        -:   62:namespace filesystem
        -:   63:{
        -:   64:_GLIBCXX_BEGIN_NAMESPACE_CXX11
        -:   65:
        -:   66:  class path;
        -:   67:
        -:   68:  /// @cond undocumented
        -:   69:namespace __detail
        -:   70:{
        -:   71:  /// @addtogroup filesystem
        -:   72:  /// @{
        -:   73:  template<typename _CharT>
        -:   74:    inline constexpr bool __is_encoded_char = false;
        -:   75:  template<>
        -:   76:    inline constexpr bool __is_encoded_char<char> = true;
        -:   77:#ifdef _GLIBCXX_USE_CHAR8_T
        -:   78:  template<>
        -:   79:    inline constexpr bool __is_encoded_char<char8_t> = true;
        -:   80:#endif
        -:   81:#if _GLIBCXX_USE_WCHAR_T
        -:   82:  template<>
        -:   83:    inline constexpr bool __is_encoded_char<wchar_t> = true;
        -:   84:#endif
        -:   85:  template<>
        -:   86:    inline constexpr bool __is_encoded_char<char16_t> = true;
        -:   87:  template<>
        -:   88:    inline constexpr bool __is_encoded_char<char32_t> = true;
        -:   89:
        -:   90:#if __cpp_concepts >= 201907L
        -:   91:  template<typename _Iter>
        -:   92:    using __safe_iterator_traits = std::iterator_traits<_Iter>;
        -:   93:#else
        -:   94:  template<typename _Iter>
        -:   95:    struct __safe_iterator_traits : std::iterator_traits<_Iter>
        -:   96:    { };
        -:   97:
        -:   98:  // Protect against ill-formed iterator_traits specializations in C++17
        -:   99:  template<> struct __safe_iterator_traits<void*> { };
        -:  100:  template<> struct __safe_iterator_traits<const void*> { };
        -:  101:  template<> struct __safe_iterator_traits<volatile void*> { };
        -:  102:  template<> struct __safe_iterator_traits<const volatile void*> { };
        -:  103:#endif
        -:  104:
        -:  105:  template<typename _Iter_traits, typename = void>
        -:  106:    struct __is_path_iter_src
        -:  107:    : false_type
        -:  108:    { };
        -:  109:
        -:  110:  template<typename _Iter_traits>
        -:  111:    struct __is_path_iter_src<_Iter_traits,
        -:  112:			      void_t<typename _Iter_traits::value_type>>
        -:  113:    : bool_constant<__is_encoded_char<typename _Iter_traits::value_type>>
        -:  114:    { };
        -:  115:
        -:  116:  template<typename _Source>
        -:  117:    inline constexpr bool __is_path_src
        -:  118:      = __is_path_iter_src<iterator_traits<decay_t<_Source>>>::value;
        -:  119:
        -:  120:  template<>
        -:  121:    inline constexpr bool __is_path_src<path> = false;
        -:  122:
        -:  123:  template<>
        -:  124:    inline constexpr bool __is_path_src<volatile path> = false;
        -:  125:
        -:  126:  template<>
        -:  127:    inline constexpr bool __is_path_src<void*> = false;
        -:  128:
        -:  129:  template<>
        -:  130:    inline constexpr bool __is_path_src<const void*> = false;
        -:  131:
        -:  132:  template<>
        -:  133:    inline constexpr bool __is_path_src<volatile void*> = false;
        -:  134:
        -:  135:  template<>
        -:  136:    inline constexpr bool __is_path_src<const volatile void*> = false;
        -:  137:
        -:  138:  template<typename _CharT, typename _Traits, typename _Alloc>
        -:  139:    inline constexpr bool
        -:  140:      __is_path_src<basic_string<_CharT, _Traits, _Alloc>>
        -:  141:	= __is_encoded_char<_CharT>;
        -:  142:
        -:  143:  template<typename _CharT, typename _Traits>
        -:  144:    inline constexpr bool
        -:  145:      __is_path_src<basic_string_view<_CharT, _Traits>>
        -:  146:	= __is_encoded_char<_CharT>;
        -:  147:
        -:  148:  // SFINAE constraint for Source parameters as required by [fs.path.req].
        -:  149:  template<typename _Tp>
        -:  150:    using _Path = enable_if_t<__is_path_src<_Tp>, path>;
        -:  151:
        -:  152:  // SFINAE constraint for InputIterator parameters as required by [fs.req].
        -:  153:  template<typename _Iter, typename _Tr = __safe_iterator_traits<_Iter>>
        -:  154:    using _Path2 = enable_if_t<__is_path_iter_src<_Tr>::value, path>;
        -:  155:
        -:  156:  // The __effective_range overloads convert a Source parameter into
        -:  157:  // either a basic_string_view or basic_string containing the
        -:  158:  // effective range of the Source, as defined in [fs.path.req].
        -:  159:
        -:  160:  template<typename _CharT, typename _Traits, typename _Alloc>
        -:  161:    inline basic_string_view<_CharT, _Traits>
        -:  162:    __effective_range(const basic_string<_CharT, _Traits, _Alloc>& __source)
        -:  163:    { return __source; }
        -:  164:
        -:  165:  template<typename _CharT, typename _Traits>
        -:  166:    inline const basic_string_view<_CharT, _Traits>&
        -:  167:    __effective_range(const basic_string_view<_CharT, _Traits>& __source)
        -:  168:    { return __source; }
        -:  169:
        -:  170:  template<typename _Source>
        -:  171:    inline auto
        -:  172:    __effective_range(const _Source& __source)
        -:  173:    {
        -:  174:      if constexpr (is_pointer_v<decay_t<_Source>>)
        -:  175:	return basic_string_view{&*__source};
        -:  176:      else
        -:  177:	{
        -:  178:	  // _Source is an input iterator that iterates over an NTCTS.
        -:  179:	  // Create a basic_string by reading until the null character.
        -:  180:	  using value_type
        -:  181:	    = typename iterator_traits<_Source>::value_type;
        -:  182:	  basic_string<value_type> __str;
        -:  183:	  _Source __it = __source;
        -:  184:	  for (value_type __ch = *__it; __ch != value_type(); __ch = *++__it)
        -:  185:	    __str.push_back(__ch);
        -:  186:	  return __str;
        -:  187:	}
        -:  188:    }
        -:  189:
        -:  190:  // The value type of a Source parameter's effective range.
        -:  191:  template<typename _Tp>
        -:  192:    using __value_t = typename remove_reference_t<
        -:  193:      decltype(__detail::__effective_range(std::declval<_Tp>()))>::value_type;
        -:  194:
        -:  195:  // SFINAE helper to check that an effective range has value_type char,
        -:  196:  // as required by path constructors taking a std::locale parameter.
        -:  197:  // The type _Tp must have already been checked by _Path<Tp> or _Path2<_Tp>.
        -:  198:  template<typename _Tp, typename _Val = __value_t<_Tp>>
        -:  199:    using __value_type_is_char
        -:  200:      = std::enable_if_t<std::is_same_v<_Val, char>, _Val>;
        -:  201:
        -:  202:  // As above, but also allows char8_t, as required by u8path
        -:  203:  // C++20 [depr.fs.path.factory]
        -:  204:  template<typename _Tp, typename _Val = __value_t<_Tp>>
        -:  205:    using __value_type_is_char_or_char8_t
        -:  206:      = std::enable_if_t<std::is_same_v<_Val, char>
        -:  207:#ifdef _GLIBCXX_USE_CHAR8_T
        -:  208:			 || std::is_same_v<_Val, char8_t>
        -:  209:#endif
        -:  210:			 , _Val>;
        -:  211:
        -:  212:  // Create a string or string view from an iterator range.
        -:  213:  template<typename _InputIterator>
        -:  214:    inline auto
        -:  215:    __string_from_range(_InputIterator __first, _InputIterator __last)
        -:  216:    {
        -:  217:      using _EcharT
        -:  218:	= typename std::iterator_traits<_InputIterator>::value_type;
        -:  219:      static_assert(__is_encoded_char<_EcharT>);
        -:  220:
        -:  221:#if __cpp_lib_concepts
        -:  222:      constexpr bool __contiguous = std::contiguous_iterator<_InputIterator>;
        -:  223:#else
        -:  224:      constexpr bool __contiguous
        -:  225:	= is_pointer_v<decltype(std::__niter_base(__first))>;
        -:  226:#endif
        -:  227:      if constexpr (__contiguous)
        -:  228:	{
        -:  229:	  // For contiguous iterators we can just return a string view.
        -:  230:	  const auto* __f = std::__to_address(std::__niter_base(__first));
        -:  231:	  const auto* __l = std::__to_address(std::__niter_base(__last));
        -:  232:	  return basic_string_view<_EcharT>(__f, __l - __f);
        -:  233:	}
        -:  234:      else
        -:  235:	// Conversion requires contiguous characters, so create a string.
        -:  236:	return basic_string<_EcharT>(__first, __last);
        -:  237:    }
        -:  238:
        -:  239:  /// @} group filesystem
        -:  240:} // namespace __detail
        -:  241:  /// @endcond
        -:  242:
        -:  243:  /// @addtogroup filesystem
        -:  244:  /// @{
        -:  245:
        -:  246:  /// A filesystem path
        -:  247:  /// @ingroup filesystem
        -:  248:  class path
        -:  249:  {
        -:  250:  public:
        -:  251:#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS
        -:  252:    using value_type = wchar_t;
        -:  253:    static constexpr value_type preferred_separator = L'\\';
        -:  254:#else
        -:  255:# ifdef _GLIBCXX_DOXYGEN
        -:  256:    /// Windows uses wchar_t for path::value_type, POSIX uses char.
        -:  257:    using value_type = __os_dependent__;
        -:  258:# else
        -:  259:    using value_type =  char;
        -:  260:# endif
        -:  261:    static constexpr value_type preferred_separator = '/';
        -:  262:#endif
        -:  263:    using string_type = std::basic_string<value_type>;
        -:  264:
        -:  265:    /// path::format is ignored in this implementation
        -:  266:    enum format : unsigned char { native_format, generic_format, auto_format };
        -:  267:
        -:  268:    // constructors and destructor
        -:  269:
        -:  270:    path() noexcept { }
        -:  271:
        -:  272:    path(const path& __p) = default;
        -:  273:
        -:  274:    path(path&& __p)
        -:  275:#if _GLIBCXX_USE_CXX11_ABI || _GLIBCXX_FULLY_DYNAMIC_STRING == 0
        -:  276:      noexcept
        -:  277:#endif
        -:  278:    : _M_pathname(std::move(__p._M_pathname)),
        -:  279:      _M_cmpts(std::move(__p._M_cmpts))
        -:  280:    { __p.clear(); }
        -:  281:
        -:  282:    path(string_type&& __source, format = auto_format)
        -:  283:    : _M_pathname(std::move(__source))
        -:  284:    { _M_split_cmpts(); }
        -:  285:
        -:  286:    template<typename _Source,
        -:  287:	     typename _Require = __detail::_Path<_Source>>
        -:  288:      path(_Source const& __source, format = auto_format)
        -:  289:      : _M_pathname(_S_convert(__detail::__effective_range(__source)))
        -:  290:      { _M_split_cmpts(); }
        -:  291:
        -:  292:    template<typename _InputIterator,
        -:  293:	     typename _Require = __detail::_Path2<_InputIterator>>
        -:  294:      path(_InputIterator __first, _InputIterator __last, format = auto_format)
        -:  295:      : _M_pathname(_S_convert(__detail::__string_from_range(__first, __last)))
        -:  296:      { _M_split_cmpts(); }
        -:  297:
        -:  298:    template<typename _Source,
        -:  299:	     typename _Require = __detail::_Path<_Source>,
        -:  300:	     typename _Require2 = __detail::__value_type_is_char<_Source>>
        -:  301:      path(_Source const& __src, const locale& __loc, format = auto_format)
        -:  302:      : _M_pathname(_S_convert_loc(__detail::__effective_range(__src), __loc))
        -:  303:      { _M_split_cmpts(); }
        -:  304:
        -:  305:    template<typename _InputIterator,
        -:  306:	     typename _Require = __detail::_Path2<_InputIterator>,
        -:  307:	     typename _Req2 = __detail::__value_type_is_char<_InputIterator>>
        -:  308:      path(_InputIterator __first, _InputIterator __last, const locale& __loc,
        -:  309:	   format = auto_format)
        -:  310:      : _M_pathname(_S_convert_loc(__first, __last, __loc))
        -:  311:      { _M_split_cmpts(); }
        -:  312:
function _ZNSt10filesystem7__cxx114pathD2Ev called 8 returned 100% blocks executed 100%
        8:  313:    ~path() = default;
        8:  313-block  0
call    0 returned 8
call    1 returned 8
        -:  314:
        -:  315:    // assignments
        -:  316:
        -:  317:    path& operator=(const path&);
        -:  318:    path& operator=(path&&) noexcept;
        -:  319:    path& operator=(string_type&& __source);
        -:  320:    path& assign(string_type&& __source);
        -:  321:
        -:  322:    template<typename _Source>
        -:  323:      __detail::_Path<_Source>&
        -:  324:      operator=(_Source const& __source)
        -:  325:      { return *this = path(__source); }
        -:  326:
        -:  327:    template<typename _Source>
        -:  328:      __detail::_Path<_Source>&
        -:  329:      assign(_Source const& __source)
        -:  330:      { return *this = path(__source); }
        -:  331:
        -:  332:    template<typename _InputIterator>
        -:  333:      __detail::_Path2<_InputIterator>&
        -:  334:      assign(_InputIterator __first, _InputIterator __last)
        -:  335:      { return *this = path(__first, __last); }
        -:  336:
        -:  337:    // appends
        -:  338:
        -:  339:    path& operator/=(const path& __p);
        -:  340:
        -:  341:    template<typename _Source>
        -:  342:      __detail::_Path<_Source>&
        -:  343:      operator/=(_Source const& __source)
        -:  344:      {
        -:  345:	_M_append(_S_convert(__detail::__effective_range(__source)));
        -:  346:	return *this;
        -:  347:      }
        -:  348:
        -:  349:    template<typename _Source>
        -:  350:      __detail::_Path<_Source>&
        -:  351:      append(_Source const& __source)
        -:  352:      {
        -:  353:	_M_append(_S_convert(__detail::__effective_range(__source)));
        -:  354:	return *this;
        -:  355:      }
        -:  356:
        -:  357:    template<typename _InputIterator>
        -:  358:      __detail::_Path2<_InputIterator>&
        -:  359:      append(_InputIterator __first, _InputIterator __last)
        -:  360:      {
        -:  361:	_M_append(_S_convert(__detail::__string_from_range(__first, __last)));
        -:  362:	return *this;
        -:  363:      }
        -:  364:
        -:  365:    // concatenation
        -:  366:
        -:  367:    path& operator+=(const path& __x);
        -:  368:    path& operator+=(const string_type& __x);
        -:  369:    path& operator+=(const value_type* __x);
        -:  370:    path& operator+=(value_type __x);
        -:  371:    path& operator+=(basic_string_view<value_type> __x);
        -:  372:
        -:  373:    template<typename _Source>
        -:  374:      __detail::_Path<_Source>&
        -:  375:      operator+=(_Source const& __x) { return concat(__x); }
        -:  376:
        -:  377:    template<typename _CharT>
        -:  378:      __detail::_Path2<_CharT*>&
        -:  379:      operator+=(_CharT __x);
        -:  380:
        -:  381:    template<typename _Source>
        -:  382:      __detail::_Path<_Source>&
        -:  383:      concat(_Source const& __x)
        -:  384:      {
        -:  385:	_M_concat(_S_convert(__detail::__effective_range(__x)));
        -:  386:	return *this;
        -:  387:      }
        -:  388:
        -:  389:    template<typename _InputIterator>
        -:  390:      __detail::_Path2<_InputIterator>&
        -:  391:      concat(_InputIterator __first, _InputIterator __last)
        -:  392:      {
        -:  393:	_M_concat(_S_convert(__detail::__string_from_range(__first, __last)));
        -:  394:	return *this;
        -:  395:      }
        -:  396:
        -:  397:    // modifiers
        -:  398:
        -:  399:    void clear() noexcept { _M_pathname.clear(); _M_split_cmpts(); }
        -:  400:
        -:  401:    path& make_preferred();
        -:  402:    path& remove_filename();
        -:  403:    path& replace_filename(const path& __replacement);
        -:  404:    path& replace_extension(const path& __replacement = path());
        -:  405:
        -:  406:    void swap(path& __rhs) noexcept;
        -:  407:
        -:  408:    // native format observers
        -:  409:
        -:  410:    const string_type&  native() const noexcept { return _M_pathname; }
        -:  411:    const value_type*   c_str() const noexcept { return _M_pathname.c_str(); }
        -:  412:    operator string_type() const { return _M_pathname; }
        -:  413:
        -:  414:    template<typename _CharT, typename _Traits = std::char_traits<_CharT>,
        -:  415:	     typename _Allocator = std::allocator<_CharT>>
        -:  416:      std::basic_string<_CharT, _Traits, _Allocator>
        -:  417:      string(const _Allocator& __a = _Allocator()) const;
        -:  418:
        -:  419:    std::string    string() const;
        -:  420:#if _GLIBCXX_USE_WCHAR_T
        -:  421:    std::wstring   wstring() const;
        -:  422:#endif
        -:  423:#ifdef _GLIBCXX_USE_CHAR8_T
        -:  424:    __attribute__((__abi_tag__("__u8")))
        -:  425:    std::u8string  u8string() const;
        -:  426:#else
        -:  427:    std::string    u8string() const;
        -:  428:#endif // _GLIBCXX_USE_CHAR8_T
        -:  429:    std::u16string u16string() const;
        -:  430:    std::u32string u32string() const;
        -:  431:
        -:  432:    // generic format observers
        -:  433:    template<typename _CharT, typename _Traits = std::char_traits<_CharT>,
        -:  434:	     typename _Allocator = std::allocator<_CharT>>
        -:  435:      std::basic_string<_CharT, _Traits, _Allocator>
        -:  436:      generic_string(const _Allocator& __a = _Allocator()) const;
        -:  437:
        -:  438:    std::string    generic_string() const;
        -:  439:#if _GLIBCXX_USE_WCHAR_T
        -:  440:    std::wstring   generic_wstring() const;
        -:  441:#endif
        -:  442:#ifdef _GLIBCXX_USE_CHAR8_T
        -:  443:    __attribute__((__abi_tag__("__u8")))
        -:  444:    std::u8string  generic_u8string() const;
        -:  445:#else
        -:  446:    std::string    generic_u8string() const;
        -:  447:#endif // _GLIBCXX_USE_CHAR8_T
        -:  448:    std::u16string generic_u16string() const;
        -:  449:    std::u32string generic_u32string() const;
        -:  450:
        -:  451:    // compare
        -:  452:
        -:  453:    int compare(const path& __p) const noexcept;
        -:  454:    int compare(const string_type& __s) const noexcept;
        -:  455:    int compare(const value_type* __s) const noexcept;
        -:  456:    int compare(basic_string_view<value_type> __s) const noexcept;
        -:  457:
        -:  458:    // decomposition
        -:  459:
        -:  460:    path root_name() const;
        -:  461:    path root_directory() const;
        -:  462:    path root_path() const;
        -:  463:    path relative_path() const;
        -:  464:    path parent_path() const;
        -:  465:    path filename() const;
        -:  466:    path stem() const;
        -:  467:    path extension() const;
        -:  468:
        -:  469:    // query
        -:  470:
        -:  471:    [[nodiscard]] bool empty() const noexcept { return _M_pathname.empty(); }
        -:  472:    bool has_root_name() const noexcept;
        -:  473:    bool has_root_directory() const noexcept;
        -:  474:    bool has_root_path() const noexcept;
        -:  475:    bool has_relative_path() const noexcept;
        -:  476:    bool has_parent_path() const noexcept;
        -:  477:    bool has_filename() const noexcept;
        -:  478:    bool has_stem() const noexcept;
        -:  479:    bool has_extension() const noexcept;
        -:  480:    bool is_absolute() const noexcept;
        -:  481:    bool is_relative() const noexcept { return !is_absolute(); }
        -:  482:
        -:  483:    // generation
        -:  484:    path lexically_normal() const;
        -:  485:    path lexically_relative(const path& base) const;
        -:  486:    path lexically_proximate(const path& base) const;
        -:  487:
        -:  488:    // iterators
        -:  489:    class iterator;
        -:  490:    using const_iterator = iterator;
        -:  491:
        -:  492:    iterator begin() const;
        -:  493:    iterator end() const;
        -:  494:
        -:  495:    /// Write a path to a stream
        -:  496:    template<typename _CharT, typename _Traits>
        -:  497:      friend std::basic_ostream<_CharT, _Traits>&
        -:  498:      operator<<(std::basic_ostream<_CharT, _Traits>& __os, const path& __p)
        -:  499:      {
        -:  500:	__os << std::quoted(__p.string<_CharT, _Traits>());
        -:  501:	return __os;
        -:  502:      }
        -:  503:
        -:  504:    /// Read a path from a stream
        -:  505:    template<typename _CharT, typename _Traits>
        -:  506:      friend std::basic_istream<_CharT, _Traits>&
        -:  507:      operator>>(std::basic_istream<_CharT, _Traits>& __is, path& __p)
        -:  508:      {
        -:  509:	std::basic_string<_CharT, _Traits> __tmp;
        -:  510:	if (__is >> std::quoted(__tmp))
        -:  511:	  __p = std::move(__tmp);
        -:  512:	return __is;
        -:  513:      }
        -:  514:
        -:  515:    // non-member operators
        -:  516:
        -:  517:    /// Compare paths
        -:  518:    friend bool operator==(const path& __lhs, const path& __rhs) noexcept
        -:  519:    { return path::_S_compare(__lhs, __rhs) == 0; }
        -:  520:
        -:  521:#if __cpp_lib_three_way_comparison
        -:  522:    /// Compare paths
        -:  523:    friend strong_ordering
        -:  524:    operator<=>(const path& __lhs, const path& __rhs) noexcept
        -:  525:    { return path::_S_compare(__lhs, __rhs) <=> 0; }
        -:  526:#else
        -:  527:    /// Compare paths
        -:  528:    friend bool operator!=(const path& __lhs, const path& __rhs) noexcept
        -:  529:    { return !(__lhs == __rhs); }
        -:  530:
        -:  531:    /// Compare paths
        -:  532:    friend bool operator<(const path& __lhs, const path& __rhs) noexcept
        -:  533:    { return __lhs.compare(__rhs) < 0; }
        -:  534:
        -:  535:    /// Compare paths
        -:  536:    friend bool operator<=(const path& __lhs, const path& __rhs) noexcept
        -:  537:    { return !(__rhs < __lhs); }
        -:  538:
        -:  539:    /// Compare paths
        -:  540:    friend bool operator>(const path& __lhs, const path& __rhs) noexcept
        -:  541:    { return __rhs < __lhs; }
        -:  542:
        -:  543:    /// Compare paths
        -:  544:    friend bool operator>=(const path& __lhs, const path& __rhs) noexcept
        -:  545:    { return !(__lhs < __rhs); }
        -:  546:#endif
        -:  547:
        -:  548:    /// Append one path to another
        -:  549:    friend path operator/(const path& __lhs, const path& __rhs)
        -:  550:    {
        -:  551:      path __result(__lhs);
        -:  552:      __result /= __rhs;
        -:  553:      return __result;
        -:  554:    }
        -:  555:
        -:  556:  private:
        -:  557:    enum class _Type : unsigned char {
        -:  558:      _Multi = 0, _Root_name, _Root_dir, _Filename
        -:  559:    };
        -:  560:
        -:  561:    path(basic_string_view<value_type> __str, _Type __type)
        -:  562:    : _M_pathname(__str)
        -:  563:    {
        -:  564:      __glibcxx_assert(__type != _Type::_Multi);
        -:  565:      _M_cmpts.type(__type);
        -:  566:    }
        -:  567:
        -:  568:    enum class _Split { _Stem, _Extension };
        -:  569:
        -:  570:    void _M_append(basic_string_view<value_type>);
        -:  571:    void _M_concat(basic_string_view<value_type>);
        -:  572:
        -:  573:    pair<const string_type*, size_t> _M_find_extension() const noexcept;
        -:  574:
        -:  575:    // path::_S_convert creates a basic_string<value_type> or
        -:  576:    // basic_string_view<value_type> from a range (either the effective
        -:  577:    // range of a Source parameter, or a pair of InputIterator parameters),
        -:  578:    // performing the conversions required by [fs.path.type.cvt].
        -:  579:    // If the value_type of the range value type is path::value_type,
        -:  580:    // no encoding conversion is performed. If the range is contiguous
        -:  581:    // a string_view
        -:  582:
        -:  583:    static string_type
        -:  584:    _S_convert(string_type __str)
        -:  585:    { return __str; }
        -:  586:
        -:  587:    template<typename _Tp>
        -:  588:      static auto
        -:  589:      _S_convert(const _Tp& __str)
        -:  590:      {
        -:  591:	if constexpr (is_same_v<_Tp, string_type>)
        -:  592:	  return __str;
        -:  593:	else if constexpr (is_same_v<_Tp, basic_string_view<value_type>>)
        -:  594:	  return __str;
        -:  595:	else if constexpr (is_same_v<typename _Tp::value_type, value_type>)
        -:  596:	  return basic_string_view<value_type>(__str.data(), __str.size());
        -:  597:	else
        -:  598:	  return _S_convert(__str.data(), __str.data() + __str.size());
        -:  599:      }
        -:  600:
        -:  601:    template<typename _EcharT>
        -:  602:      static auto
        -:  603:      _S_convert(const _EcharT* __first, const _EcharT* __last);
        -:  604:
        -:  605:    static string_type
        -:  606:    _S_convert_loc(const char* __first, const char* __last,
        -:  607:		   const std::locale& __loc);
        -:  608:
        -:  609:    template<typename _Iter>
        -:  610:      static string_type
        -:  611:      _S_convert_loc(_Iter __first, _Iter __last, const std::locale& __loc)
        -:  612:      {
        -:  613:	const auto __s = __detail::__string_from_range(__first, __last);
        -:  614:	return _S_convert_loc(__s.data(), __s.data() + __s.size(), __loc);
        -:  615:      }
        -:  616:
        -:  617:    template<typename _Tp>
        -:  618:      static string_type
        -:  619:      _S_convert_loc(const _Tp& __s, const std::locale& __loc)
        -:  620:      {
        -:  621:	return _S_convert_loc(__s.data(), __s.data() + __s.size(), __loc);
        -:  622:      }
        -:  623:
        -:  624:    template<typename _CharT, typename _Traits, typename _Allocator>
        -:  625:      static basic_string<_CharT, _Traits, _Allocator>
        -:  626:      _S_str_convert(basic_string_view<value_type>, const _Allocator&);
        -:  627:
        -:  628:    // Returns lhs.compare(rhs), but defined after path::iterator is complete.
        -:  629:    __attribute__((__always_inline__))
        -:  630:    static int
        -:  631:    _S_compare(const path& __lhs, const path& __rhs) noexcept;
        -:  632:
        -:  633:    void _M_split_cmpts();
        -:  634:
        -:  635:    _Type _M_type() const noexcept { return _M_cmpts.type(); }
        -:  636:
        -:  637:    string_type _M_pathname;
        -:  638:
        -:  639:    struct _Cmpt;
        -:  640:
        -:  641:    struct _List
        -:  642:    {
        -:  643:      using value_type = _Cmpt;
        -:  644:      using iterator = value_type*;
        -:  645:      using const_iterator = const value_type*;
        -:  646:
        -:  647:      _List();
        -:  648:      _List(const _List&);
        -:  649:      _List(_List&&) = default;
        -:  650:      _List& operator=(const _List&);
        -:  651:      _List& operator=(_List&&) = default;
function _ZNSt10filesystem7__cxx114path5_ListD2Ev called 8 returned 100% blocks executed 100%
        8:  652:      ~_List() = default;
        8:  652-block  0
call    0 returned 8
        -:  653:
        -:  654:      _Type type() const noexcept
        -:  655:      { return _Type(reinterpret_cast<uintptr_t>(_M_impl.get()) & 0x3); }
        -:  656:
        -:  657:      void type(_Type) noexcept;
        -:  658:
        -:  659:      int size() const noexcept; // zero unless type() == _Type::_Multi
        -:  660:      bool empty() const noexcept; // true unless type() == _Type::_Multi
        -:  661:      void clear();
        -:  662:      void swap(_List& __l) noexcept { _M_impl.swap(__l._M_impl); }
        -:  663:      int capacity() const noexcept;
        -:  664:      void reserve(int, bool); ///< @pre type() == _Type::_Multi
        -:  665:
        -:  666:      // All the member functions below here have a precondition !empty()
        -:  667:      // (and they should only be called from within the library).
        -:  668:
        -:  669:      iterator begin() noexcept;
        -:  670:      iterator end() noexcept;
        -:  671:      const_iterator begin() const noexcept;
        -:  672:      const_iterator end() const noexcept;
        -:  673:
        -:  674:      value_type& front() noexcept;
        -:  675:      value_type& back() noexcept;
        -:  676:      const value_type& front() const noexcept;
        -:  677:      const value_type& back() const noexcept;
        -:  678:
        -:  679:      void pop_back();
        -:  680:      void _M_erase_from(const_iterator __pos); // erases [__pos,end())
        -:  681:
        -:  682:      struct _Impl;
        -:  683:      struct _Impl_deleter
        -:  684:      {
        -:  685:	void operator()(_Impl*) const noexcept;
        -:  686:      };
        -:  687:      unique_ptr<_Impl, _Impl_deleter> _M_impl;
        -:  688:    };
        -:  689:    _List _M_cmpts;
        -:  690:
        -:  691:    struct _Parser;
        -:  692:  };
        -:  693:
        -:  694:  /// @{
        -:  695:  /// @relates std::filesystem::path
        -:  696:
        -:  697:  inline void swap(path& __lhs, path& __rhs) noexcept { __lhs.swap(__rhs); }
        -:  698:
        -:  699:  size_t hash_value(const path& __p) noexcept;
        -:  700:
        -:  701:  /// @}
        -:  702:
        -:  703:  /// Exception type thrown by the Filesystem library
        -:  704:  class filesystem_error : public std::system_error
        -:  705:  {
        -:  706:  public:
        -:  707:    filesystem_error(const string& __what_arg, error_code __ec);
        -:  708:
        -:  709:    filesystem_error(const string& __what_arg, const path& __p1,
        -:  710:		     error_code __ec);
        -:  711:
        -:  712:    filesystem_error(const string& __what_arg, const path& __p1,
        -:  713:		     const path& __p2, error_code __ec);
        -:  714:
        -:  715:    filesystem_error(const filesystem_error&) = default;
        -:  716:    filesystem_error& operator=(const filesystem_error&) = default;
        -:  717:
        -:  718:    // No move constructor or assignment operator.
        -:  719:    // Copy rvalues instead, so that _M_impl is not left empty.
        -:  720:
        -:  721:    ~filesystem_error();
        -:  722:
        -:  723:    const path& path1() const noexcept;
        -:  724:    const path& path2() const noexcept;
        -:  725:    const char* what() const noexcept;
        -:  726:
        -:  727:  private:
        -:  728:    struct _Impl;
        -:  729:    std::__shared_ptr<const _Impl> _M_impl;
        -:  730:  };
        -:  731:
        -:  732:  /// @cond undocumented
        -:  733:namespace __detail
        -:  734:{
        -:  735:  [[noreturn]] inline void
        -:  736:  __throw_conversion_error()
        -:  737:  {
        -:  738:    _GLIBCXX_THROW_OR_ABORT(filesystem_error(
        -:  739:	 "Cannot convert character sequence",
        -:  740:	 std::make_error_code(errc::illegal_byte_sequence)));
        -:  741:  }
        -:  742:
        -:  743:#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS
        -:  744:  template<typename _Tp>
        -:  745:    inline std::wstring
        -:  746:    __wstr_from_utf8(const _Tp& __str)
        -:  747:    {
        -:  748:      static_assert(std::is_same_v<typename _Tp::value_type, char>);
        -:  749:      std::wstring __wstr;
        -:  750:      // XXX This assumes native wide encoding is UTF-16.
        -:  751:      std::codecvt_utf8_utf16<wchar_t> __wcvt;
        -:  752:      const auto __p = __str.data();
        -:  753:      if (!__str_codecvt_in_all(__p, __p + __str.size(), __wstr, __wcvt))
        -:  754:	__detail::__throw_conversion_error();
        -:  755:      return __wstr;
        -:  756:    }
        -:  757:#endif
        -:  758:
        -:  759:} // namespace __detail
        -:  760:  /// @endcond
        -:  761:
        -:  762:
        -:  763:  /** Create a path from a UTF-8-encoded sequence of char
        -:  764:   *
        -:  765:   * @relates std::filesystem::path
        -:  766:   */
        -:  767:  template<typename _InputIterator,
        -:  768:	   typename _Require = __detail::_Path2<_InputIterator>,
        -:  769:	   typename _CharT
        -:  770:	     = __detail::__value_type_is_char_or_char8_t<_InputIterator>>
        -:  771:    inline path
        -:  772:    u8path(_InputIterator __first, _InputIterator __last)
        -:  773:    {
        -:  774:#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS
        -:  775:      if constexpr (is_same_v<_CharT, char>)
        -:  776:	return path{ __detail::__wstr_from_utf8(
        -:  777:	    __detail::__string_from_range(__first, __last)) };
        -:  778:      else
        -:  779:	return path{ __first, __last }; // constructor handles char8_t
        -:  780:#else
        -:  781:      // This assumes native normal encoding is UTF-8.
        -:  782:      return path{ __first, __last };
        -:  783:#endif
        -:  784:    }
        -:  785:
        -:  786:  /** Create a path from a UTF-8-encoded sequence of char
        -:  787:   *
        -:  788:   * @relates std::filesystem::path
        -:  789:   */
        -:  790:  template<typename _Source,
        -:  791:	   typename _Require = __detail::_Path<_Source>,
        -:  792:	   typename _CharT = __detail::__value_type_is_char_or_char8_t<_Source>>
        -:  793:    inline path
        -:  794:    u8path(const _Source& __source)
        -:  795:    {
        -:  796:#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS
        -:  797:      if constexpr (is_same_v<_CharT, char>)
        -:  798:	return path{ __detail::__wstr_from_utf8(
        -:  799:	    __detail::__effective_range(__source)) };
        -:  800:      else
        -:  801:	return path{ __source }; // constructor handles char8_t
        -:  802:#else
        -:  803:      // This assumes native normal encoding is UTF-8.
        -:  804:      return path{ __source };
        -:  805:#endif
        -:  806:    }
        -:  807:
        -:  808:  /// @cond undocumented
        -:  809:
        -:  810:  struct path::_Cmpt : path
        -:  811:  {
        -:  812:    _Cmpt(basic_string_view<value_type> __s, _Type __t, size_t __pos)
        -:  813:      : path(__s, __t), _M_pos(__pos) { }
        -:  814:
        -:  815:    _Cmpt() : _M_pos(-1) { }
        -:  816:
        -:  817:    size_t _M_pos;
        -:  818:  };
        -:  819:
        -:  820:  template<typename _EcharT>
        -:  821:    auto
        -:  822:    path::_S_convert(const _EcharT* __f, const _EcharT* __l)
        -:  823:    {
        -:  824:      static_assert(__detail::__is_encoded_char<_EcharT>);
        -:  825:
        -:  826:      if constexpr (is_same_v<_EcharT, value_type>)
        -:  827:	return basic_string_view<value_type>(__f, __l - __f);
        -:  828:#if !defined _GLIBCXX_FILESYSTEM_IS_WINDOWS && defined _GLIBCXX_USE_CHAR8_T
        -:  829:      else if constexpr (is_same_v<_EcharT, char8_t>)
        -:  830:	// For POSIX converting from char8_t to char is also 'noconv'
        -:  831:	return string_view(reinterpret_cast<const char*>(__f), __l - __f);
        -:  832:#endif
        -:  833:      else
        -:  834:	{
        -:  835:#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS
        -:  836:	  std::wstring __wstr;
        -:  837:	  if constexpr (is_same_v<_EcharT, char>)
        -:  838:	    {
        -:  839:	      struct _UCvt : std::codecvt<wchar_t, char, std::mbstate_t>
        -:  840:	      { } __cvt;
        -:  841:	      if (__str_codecvt_in_all(__f, __l, __wstr, __cvt))
        -:  842:		return __wstr;
        -:  843:	    }
        -:  844:#ifdef _GLIBCXX_USE_CHAR8_T
        -:  845:	  else if constexpr (is_same_v<_EcharT, char8_t>)
        -:  846:	    {
        -:  847:	      const auto __f2 = reinterpret_cast<const char*>(__f);
        -:  848:	      return __detail::__wstr_from_utf8(string_view(__f2, __l - __f));
        -:  849:	    }
        -:  850:#endif
        -:  851:	  else // char16_t or char32_t
        -:  852:	    {
        -:  853:	      struct _UCvt : std::codecvt<_EcharT, char, std::mbstate_t>
        -:  854:	      { } __cvt;
        -:  855:	      std::string __str;
        -:  856:	      if (__str_codecvt_out_all(__f, __l, __str, __cvt))
        -:  857:		return __detail::__wstr_from_utf8(__str);
        -:  858:	    }
        -:  859:#else // ! windows
        -:  860:	  struct _UCvt : std::codecvt<_EcharT, char, std::mbstate_t>
        -:  861:	  { } __cvt;
        -:  862:	  std::string __str;
        -:  863:	  if (__str_codecvt_out_all(__f, __l, __str, __cvt))
        -:  864:	    return __str;
        -:  865:#endif
        -:  866:	  __detail::__throw_conversion_error();
        -:  867:	}
        -:  868:    }
        -:  869:
        -:  870:  /// @endcond
        -:  871:
        -:  872:  /// An iterator for the components of a path
        -:  873:  class path::iterator
        -:  874:  {
        -:  875:  public:
        -:  876:    using difference_type	= std::ptrdiff_t;
        -:  877:    using value_type		= path;
        -:  878:    using reference		= const path&;
        -:  879:    using pointer		= const path*;
        -:  880:    using iterator_category	= std::bidirectional_iterator_tag;
        -:  881:
        -:  882:    iterator() : _M_path(nullptr), _M_cur(), _M_at_end() { }
        -:  883:
        -:  884:    iterator(const iterator&) = default;
        -:  885:    iterator& operator=(const iterator&) = default;
        -:  886:
        -:  887:    reference operator*() const;
        -:  888:    pointer   operator->() const { return std::__addressof(**this); }
        -:  889:
        -:  890:    iterator& operator++();
        -:  891:    iterator  operator++(int) { auto __tmp = *this; ++*this; return __tmp; }
        -:  892:
        -:  893:    iterator& operator--();
        -:  894:    iterator  operator--(int) { auto __tmp = *this; --*this; return __tmp; }
        -:  895:
        -:  896:    friend bool operator==(const iterator& __lhs, const iterator& __rhs)
        -:  897:    { return __lhs._M_equals(__rhs); }
        -:  898:
        -:  899:    friend bool operator!=(const iterator& __lhs, const iterator& __rhs)
        -:  900:    { return !__lhs._M_equals(__rhs); }
        -:  901:
        -:  902:  private:
        -:  903:    friend class path;
        -:  904:
        -:  905:    bool _M_is_multi() const { return _M_path->_M_type() == _Type::_Multi; }
        -:  906:
        -:  907:    friend difference_type
        -:  908:    __path_iter_distance(const iterator& __first, const iterator& __last)
        -:  909:    {
        -:  910:      __glibcxx_assert(__first._M_path != nullptr);
        -:  911:      __glibcxx_assert(__first._M_path == __last._M_path);
        -:  912:      if (__first._M_is_multi())
        -:  913:	return std::distance(__first._M_cur, __last._M_cur);
        -:  914:      else if (__first._M_at_end == __last._M_at_end)
        -:  915:	return 0;
        -:  916:      else
        -:  917:	return __first._M_at_end ? -1 : 1;
        -:  918:    }
        -:  919:
        -:  920:    friend void
        -:  921:    __path_iter_advance(iterator& __i, difference_type __n)
        -:  922:    {
        -:  923:      if (__n == 1)
        -:  924:	++__i;
        -:  925:      else if (__n == -1)
        -:  926:	--__i;
        -:  927:      else if (__n != 0)
        -:  928:	{
        -:  929:	  __glibcxx_assert(__i._M_path != nullptr);
        -:  930:	  __glibcxx_assert(__i._M_is_multi());
        -:  931:	  // __glibcxx_assert(__i._M_path->_M_cmpts.end() - __i._M_cur >= __n);
        -:  932:	  __i._M_cur += __n;
        -:  933:	}
        -:  934:    }
        -:  935:
        -:  936:    iterator(const path* __path, path::_List::const_iterator __iter)
        -:  937:    : _M_path(__path), _M_cur(__iter), _M_at_end()
        -:  938:    { }
        -:  939:
        -:  940:    iterator(const path* __path, bool __at_end)
        -:  941:    : _M_path(__path), _M_cur(), _M_at_end(__at_end)
        -:  942:    { }
        -:  943:
        -:  944:    bool _M_equals(iterator) const;
        -:  945:
        -:  946:    const path* 		_M_path;
        -:  947:    path::_List::const_iterator _M_cur;
        -:  948:    bool			_M_at_end;  // only used when type != _Multi
        -:  949:  };
        -:  950:
        -:  951:
        -:  952:  inline path&
        -:  953:  path::operator=(path&& __p) noexcept
        -:  954:  {
        -:  955:    if (&__p == this) [[__unlikely__]]
        -:  956:      return *this;
        -:  957:
        -:  958:    _M_pathname = std::move(__p._M_pathname);
        -:  959:    _M_cmpts = std::move(__p._M_cmpts);
        -:  960:    __p.clear();
        -:  961:    return *this;
        -:  962:  }
        -:  963:
        -:  964:  inline path&
        -:  965:  path::operator=(string_type&& __source)
        -:  966:  { return *this = path(std::move(__source)); }
        -:  967:
        -:  968:  inline path&
        -:  969:  path::assign(string_type&& __source)
        -:  970:  { return *this = path(std::move(__source)); }
        -:  971:
        -:  972:  inline path&
        -:  973:  path::operator+=(const string_type& __x)
        -:  974:  {
        -:  975:    _M_concat(__x);
        -:  976:    return *this;
        -:  977:  }
        -:  978:
        -:  979:  inline path&
        -:  980:  path::operator+=(const value_type* __x)
        -:  981:  {
        -:  982:    _M_concat(__x);
        -:  983:    return *this;
        -:  984:  }
        -:  985:
        -:  986:  inline path&
        -:  987:  path::operator+=(value_type __x)
        -:  988:  {
        -:  989:    _M_concat(basic_string_view<value_type>(&__x, 1));
        -:  990:    return *this;
        -:  991:  }
        -:  992:
        -:  993:  inline path&
        -:  994:  path::operator+=(basic_string_view<value_type> __x)
        -:  995:  {
        -:  996:    _M_concat(__x);
        -:  997:    return *this;
        -:  998:  }
        -:  999:
        -: 1000:  template<typename _CharT>
        -: 1001:    inline __detail::_Path2<_CharT*>&
        -: 1002:    path::operator+=(const _CharT __x)
        -: 1003:    {
        -: 1004:      _M_concat(_S_convert(&__x, &__x + 1));
        -: 1005:      return *this;
        -: 1006:    }
        -: 1007:
        -: 1008:  inline path&
        -: 1009:  path::make_preferred()
        -: 1010:  {
        -: 1011:#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS
        -: 1012:    std::replace(_M_pathname.begin(), _M_pathname.end(), L'/',
        -: 1013:		 preferred_separator);
        -: 1014:#endif
        -: 1015:    return *this;
        -: 1016:  }
        -: 1017:
        -: 1018:  inline void path::swap(path& __rhs) noexcept
        -: 1019:  {
        -: 1020:    _M_pathname.swap(__rhs._M_pathname);
        -: 1021:    _M_cmpts.swap(__rhs._M_cmpts);
        -: 1022:  }
        -: 1023:
        -: 1024:  /// @cond undocumented
        -: 1025:  template<typename _CharT, typename _Traits, typename _Allocator>
        -: 1026:    std::basic_string<_CharT, _Traits, _Allocator>
        -: 1027:    path::_S_str_convert(basic_string_view<value_type> __str,
        -: 1028:			 const _Allocator& __a)
        -: 1029:    {
        -: 1030:      static_assert(!is_same_v<_CharT, value_type>);
        -: 1031:
        -: 1032:      using _WString = basic_string<_CharT, _Traits, _Allocator>;
        -: 1033:
        -: 1034:      if (__str.size() == 0)
        -: 1035:	return _WString(__a);
        -: 1036:
        -: 1037:#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS
        -: 1038:      // First convert native string from UTF-16 to to UTF-8.
        -: 1039:      // XXX This assumes that the execution wide-character set is UTF-16.
        -: 1040:      std::codecvt_utf8_utf16<value_type> __cvt;
        -: 1041:
        -: 1042:      using _CharAlloc = __alloc_rebind<_Allocator, char>;
        -: 1043:      using _String = basic_string<char, char_traits<char>, _CharAlloc>;
        -: 1044:      _String __u8str{_CharAlloc{__a}};
        -: 1045:      const value_type* __wfirst = __str.data();
        -: 1046:      const value_type* __wlast = __wfirst + __str.size();
        -: 1047:      if (__str_codecvt_out_all(__wfirst, __wlast, __u8str, __cvt)) {
        -: 1048:      if constexpr (is_same_v<_CharT, char>)
        -: 1049:	return __u8str; // XXX assumes native ordinary encoding is UTF-8.
        -: 1050:      else {
        -: 1051:
        -: 1052:      const char* __first = __u8str.data();
        -: 1053:      const char* __last = __first + __u8str.size();
        -: 1054:#else
        -: 1055:      const value_type* __first = __str.data();
        -: 1056:      const value_type* __last = __first + __str.size();
        -: 1057:#endif
        -: 1058:
        -: 1059:      // Convert UTF-8 string to requested format.
        -: 1060:#ifdef _GLIBCXX_USE_CHAR8_T
        -: 1061:      if constexpr (is_same_v<_CharT, char8_t>)
        -: 1062:	return _WString(__first, __last, __a);
        -: 1063:      else
        -: 1064:#endif
        -: 1065:	{
        -: 1066:	  // Convert UTF-8 to wide string.
        -: 1067:	  _WString __wstr(__a);
        -: 1068:	  struct _UCvt : std::codecvt<_CharT, char, std::mbstate_t> { } __cvt;
        -: 1069:	  if (__str_codecvt_in_all(__first, __last, __wstr, __cvt))
        -: 1070:	    return __wstr;
        -: 1071:	}
        -: 1072:
        -: 1073:#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS
        -: 1074:      } }
        -: 1075:#endif
        -: 1076:      __detail::__throw_conversion_error();
        -: 1077:    }
        -: 1078:  /// @endcond
        -: 1079:
        -: 1080:  template<typename _CharT, typename _Traits, typename _Allocator>
        -: 1081:    inline basic_string<_CharT, _Traits, _Allocator>
        -: 1082:    path::string(const _Allocator& __a) const
        -: 1083:    {
        -: 1084:      if constexpr (is_same_v<_CharT, value_type>)
        -: 1085:	return { _M_pathname.c_str(), _M_pathname.length(), __a };
        -: 1086:      else
        -: 1087:	return _S_str_convert<_CharT, _Traits>(_M_pathname, __a);
        -: 1088:    }
        -: 1089:
        -: 1090:  inline std::string
        -: 1091:  path::string() const { return string<char>(); }
        -: 1092:
        -: 1093:#if _GLIBCXX_USE_WCHAR_T
        -: 1094:  inline std::wstring
        -: 1095:  path::wstring() const { return string<wchar_t>(); }
        -: 1096:#endif
        -: 1097:
        -: 1098:#ifdef _GLIBCXX_USE_CHAR8_T
        -: 1099:  inline std::u8string
        -: 1100:  path::u8string() const { return string<char8_t>(); }
        -: 1101:#else
        -: 1102:  inline std::string
        -: 1103:  path::u8string() const
        -: 1104:  {
        -: 1105:#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS
        -: 1106:    std::string __str;
        -: 1107:    // convert from native wide encoding (assumed to be UTF-16) to UTF-8
        -: 1108:    std::codecvt_utf8_utf16<value_type> __cvt;
        -: 1109:    const value_type* __first = _M_pathname.data();
        -: 1110:    const value_type* __last = __first + _M_pathname.size();
        -: 1111:    if (__str_codecvt_out_all(__first, __last, __str, __cvt))
        -: 1112:      return __str;
        -: 1113:    __detail::__throw_conversion_error();
        -: 1114:#else
        -: 1115:    return _M_pathname;
        -: 1116:#endif
        -: 1117:  }
        -: 1118:#endif // _GLIBCXX_USE_CHAR8_T
        -: 1119:
        -: 1120:  inline std::u16string
        -: 1121:  path::u16string() const { return string<char16_t>(); }
        -: 1122:
        -: 1123:  inline std::u32string
        -: 1124:  path::u32string() const { return string<char32_t>(); }
        -: 1125:
        -: 1126:  template<typename _CharT, typename _Traits, typename _Allocator>
        -: 1127:    inline std::basic_string<_CharT, _Traits, _Allocator>
        -: 1128:    path::generic_string(const _Allocator& __a) const
        -: 1129:    {
        -: 1130:#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS
        -: 1131:      const value_type __slash = L'/';
        -: 1132:#else
        -: 1133:      const value_type __slash = '/';
        -: 1134:#endif
        -: 1135:      using _Alloc2 = typename allocator_traits<_Allocator>::template
        -: 1136:	rebind_alloc<value_type>;
        -: 1137:      basic_string<value_type, char_traits<value_type>, _Alloc2> __str(__a);
        -: 1138:
        -: 1139:      if (_M_type() == _Type::_Root_dir)
        -: 1140:	__str.assign(1, __slash);
        -: 1141:      else
        -: 1142:	{
        -: 1143:	  __str.reserve(_M_pathname.size());
        -: 1144:	  bool __add_slash = false;
        -: 1145:	  for (auto& __elem : *this)
        -: 1146:	    {
        -: 1147:#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS
        -: 1148:	      if (__elem._M_type() == _Type::_Root_dir)
        -: 1149:		{
        -: 1150:		  __str += __slash;
        -: 1151:		  continue;
        -: 1152:		}
        -: 1153:#endif
        -: 1154:	      if (__add_slash)
        -: 1155:		__str += __slash;
        -: 1156:	      __str += basic_string_view<value_type>(__elem._M_pathname);
        -: 1157:	      __add_slash = __elem._M_type() == _Type::_Filename;
        -: 1158:	    }
        -: 1159:	}
        -: 1160:
        -: 1161:      if constexpr (is_same_v<_CharT, value_type>)
        -: 1162:	return __str;
        -: 1163:      else
        -: 1164:	return _S_str_convert<_CharT, _Traits>(__str, __a);
        -: 1165:    }
        -: 1166:
        -: 1167:  inline std::string
        -: 1168:  path::generic_string() const
        -: 1169:  { return generic_string<char>(); }
        -: 1170:
        -: 1171:#if _GLIBCXX_USE_WCHAR_T
        -: 1172:  inline std::wstring
        -: 1173:  path::generic_wstring() const
        -: 1174:  { return generic_string<wchar_t>(); }
        -: 1175:#endif
        -: 1176:
        -: 1177:#ifdef _GLIBCXX_USE_CHAR8_T
        -: 1178:  inline std::u8string
        -: 1179:  path::generic_u8string() const
        -: 1180:  { return generic_string<char8_t>(); }
        -: 1181:#else
        -: 1182:  inline std::string
        -: 1183:  path::generic_u8string() const
        -: 1184:  { return generic_string(); }
        -: 1185:#endif
        -: 1186:
        -: 1187:  inline std::u16string
        -: 1188:  path::generic_u16string() const
        -: 1189:  { return generic_string<char16_t>(); }
        -: 1190:
        -: 1191:  inline std::u32string
        -: 1192:  path::generic_u32string() const
        -: 1193:  { return generic_string<char32_t>(); }
        -: 1194:
        -: 1195:  inline int
        -: 1196:  path::compare(const string_type& __s) const noexcept
        -: 1197:  { return compare(basic_string_view<value_type>(__s)); }
        -: 1198:
        -: 1199:  inline int
        -: 1200:  path::compare(const value_type* __s) const noexcept
        -: 1201:  { return compare(basic_string_view<value_type>(__s)); }
        -: 1202:
        -: 1203:  inline path
        -: 1204:  path::filename() const
        -: 1205:  {
        -: 1206:    if (empty())
        -: 1207:      return {};
        -: 1208:    else if (_M_type() == _Type::_Filename)
        -: 1209:      return *this;
        -: 1210:    else if (_M_type() == _Type::_Multi)
        -: 1211:      {
        -: 1212:	if (_M_pathname.back() == preferred_separator)
        -: 1213:	  return {};
        -: 1214:	auto& __last = *--end();
        -: 1215:	if (__last._M_type() == _Type::_Filename)
        -: 1216:	  return __last;
        -: 1217:      }
        -: 1218:    return {};
        -: 1219:  }
        -: 1220:
        -: 1221:  inline path
        -: 1222:  path::stem() const
        -: 1223:  {
        -: 1224:    auto ext = _M_find_extension();
        -: 1225:    if (ext.first && ext.second != 0)
        -: 1226:      return path{ext.first->substr(0, ext.second)};
        -: 1227:    return {};
        -: 1228:  }
        -: 1229:
        -: 1230:  inline path
        -: 1231:  path::extension() const
        -: 1232:  {
        -: 1233:    auto ext = _M_find_extension();
        -: 1234:    if (ext.first && ext.second != string_type::npos)
        -: 1235:      return path{ext.first->substr(ext.second)};
        -: 1236:    return {};
        -: 1237:  }
        -: 1238:
        -: 1239:  inline bool
        -: 1240:  path::has_stem() const noexcept
        -: 1241:  {
        -: 1242:    auto ext = _M_find_extension();
        -: 1243:    return ext.first && ext.second != 0;
        -: 1244:  }
        -: 1245:
        -: 1246:  inline bool
        -: 1247:  path::has_extension() const noexcept
        -: 1248:  {
        -: 1249:    auto ext = _M_find_extension();
        -: 1250:    return ext.first && ext.second != string_type::npos;
        -: 1251:  }
        -: 1252:
        -: 1253:  inline bool
        -: 1254:  path::is_absolute() const noexcept
        -: 1255:  {
        -: 1256:#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS
        -: 1257:    return has_root_name() && has_root_directory();
        -: 1258:#else
        -: 1259:    return has_root_directory();
        -: 1260:#endif
        -: 1261:  }
        -: 1262:
        -: 1263:  inline path::iterator
        -: 1264:  path::begin() const
        -: 1265:  {
        -: 1266:    if (_M_type() == _Type::_Multi)
        -: 1267:      return iterator(this, _M_cmpts.begin());
        -: 1268:    return iterator(this, empty());
        -: 1269:  }
        -: 1270:
        -: 1271:  inline path::iterator
        -: 1272:  path::end() const
        -: 1273:  {
        -: 1274:    if (_M_type() == _Type::_Multi)
        -: 1275:      return iterator(this, _M_cmpts.end());
        -: 1276:    return iterator(this, true);
        -: 1277:  }
        -: 1278:
        -: 1279:  inline path::iterator&
        -: 1280:  path::iterator::operator++()
        -: 1281:  {
        -: 1282:    __glibcxx_assert(_M_path != nullptr);
        -: 1283:    if (_M_path->_M_type() == _Type::_Multi)
        -: 1284:      {
        -: 1285:	__glibcxx_assert(_M_cur != _M_path->_M_cmpts.end());
        -: 1286:	++_M_cur;
        -: 1287:      }
        -: 1288:    else
        -: 1289:      {
        -: 1290:	__glibcxx_assert(!_M_at_end);
        -: 1291:	_M_at_end = true;
        -: 1292:      }
        -: 1293:    return *this;
        -: 1294:  }
        -: 1295:
        -: 1296:  inline path::iterator&
        -: 1297:  path::iterator::operator--()
        -: 1298:  {
        -: 1299:    __glibcxx_assert(_M_path != nullptr);
        -: 1300:    if (_M_path->_M_type() == _Type::_Multi)
        -: 1301:      {
        -: 1302:	__glibcxx_assert(_M_cur != _M_path->_M_cmpts.begin());
        -: 1303:	--_M_cur;
        -: 1304:      }
        -: 1305:    else
        -: 1306:      {
        -: 1307:	__glibcxx_assert(_M_at_end);
        -: 1308:	_M_at_end = false;
        -: 1309:      }
        -: 1310:    return *this;
        -: 1311:  }
        -: 1312:
        -: 1313:  inline path::iterator::reference
        -: 1314:  path::iterator::operator*() const
        -: 1315:  {
        -: 1316:    __glibcxx_assert(_M_path != nullptr);
        -: 1317:    if (_M_path->_M_type() == _Type::_Multi)
        -: 1318:      {
        -: 1319:	__glibcxx_assert(_M_cur != _M_path->_M_cmpts.end());
        -: 1320:	return *_M_cur;
        -: 1321:      }
        -: 1322:    return *_M_path;
        -: 1323:  }
        -: 1324:
        -: 1325:  inline bool
        -: 1326:  path::iterator::_M_equals(iterator __rhs) const
        -: 1327:  {
        -: 1328:    if (_M_path != __rhs._M_path)
        -: 1329:      return false;
        -: 1330:    if (_M_path == nullptr)
        -: 1331:      return true;
        -: 1332:    if (_M_path->_M_type() == path::_Type::_Multi)
        -: 1333:      return _M_cur == __rhs._M_cur;
        -: 1334:    return _M_at_end == __rhs._M_at_end;
        -: 1335:  }
        -: 1336:
        -: 1337:  // Define this now that path and path::iterator are complete.
        -: 1338:  // It needs to consider the string_view(Range&&) constructor during
        -: 1339:  // overload resolution, which depends on whether range<path> is satisfied,
        -: 1340:  // which depends on whether path::iterator is complete.
        -: 1341:  inline int
        -: 1342:  path::_S_compare(const path& __lhs, const path& __rhs) noexcept
        -: 1343:  { return __lhs.compare(__rhs); }
        -: 1344:
        -: 1345:  /// @} group filesystem
        -: 1346:_GLIBCXX_END_NAMESPACE_CXX11
        -: 1347:} // namespace filesystem
        -: 1348:
        -: 1349:/// @cond undocumented
        -: 1350:
        -: 1351:inline ptrdiff_t
        -: 1352:distance(filesystem::path::iterator __first, filesystem::path::iterator __last)
        -: 1353:{ return __path_iter_distance(__first, __last); }
        -: 1354:
        -: 1355:template<typename _Distance>
        -: 1356:  void
        -: 1357:  advance(filesystem::path::iterator& __i, _Distance __n)
        -: 1358:  { __path_iter_advance(__i, static_cast<ptrdiff_t>(__n)); }
        -: 1359:
        -: 1360:extern template class __shared_ptr<const filesystem::filesystem_error::_Impl>;
        -: 1361:
        -: 1362:/// @endcond
        -: 1363:
        -: 1364:_GLIBCXX_END_NAMESPACE_VERSION
        -: 1365:} // namespace std
        -: 1366:
        -: 1367:#endif // C++17
        -: 1368:
        -: 1369:#endif // _GLIBCXX_FS_PATH_H
