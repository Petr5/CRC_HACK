        -:    0:Source:/home/peter/CLionProjects/crc/crc.cpp
        -:    0:Graph:/home/peter/CLionProjects/crc/cmake-build-debug-coverage/CMakeFiles/crc_run.dir/crc.cpp.gcno
        -:    0:Data:/home/peter/CLionProjects/crc/cmake-build-debug-coverage/CMakeFiles/crc_run.dir/crc.cpp.gcda
        -:    0:Runs:3
        -:    1:#include "crc.h"
        -:    2:using std::uint16_t;
        -:    3:using namespace std;
        -:    4:
        -:    5:
        -:    6:namespace crc{
function _ZN3crc3crc10str_to_hexENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 8 returned 100% blocks executed 86%
        8:    7:    string crc::str_to_hex(string ascii){
        8:    8:        char const hex_chars[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
        8:    9:        string res;
        8:    9-block  0
call    0 returned 8
       30:   10:        for( int i = 0; i < ascii.size(); ++i )
       22:   10-block  0
       30:   10-block  1
call    0 returned 30
branch  1 taken 22
branch  2 taken 8 (fallthrough)
        -:   11:        {
       22:   12:            char const byte = ascii[i];
       22:   12-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
        -:   13:
       22:   14:            res += hex_chars[ ( byte & 0xF0 ) >> 4 ];
       22:   14-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:   15:            res += hex_chars[ ( byte & 0x0F ) >> 0 ];
       22:   15-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
        -:   16:        }
       16:   17:        return res;
        8:   17-block  0
        8:   17-block  1
    =====:   18:    }
    $$$$$:   18-block  0
call    0 never executed
        -:   19:
function _ZN3crc3crc13calculate_crcENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 8020 returned 100% blocks executed 100%
     8020:   20:    uint16_t crc::calculate_crc(string password){
        -:   21:
     8020:   22:        unsigned char* data = new unsigned char[password.size()];
     8020:   22-block  0
call    0 returned 8020
call    1 returned 8020
branch  2 taken 8020 (fallthrough)
branch  3 taken 0 (throw)
    56128:   23:        for (int i = 0 ; i < password.size(); ++i){
     8020:   23-block  0
    56128:   23-block  1
call    0 returned 56128
branch  1 taken 48108
branch  2 taken 8020 (fallthrough)
    48108:   24:            data[i] = password[i];
    48108:   24-block  0
call    0 returned 48108
branch  1 taken 48108 (fallthrough)
branch  2 taken 0 (throw)
    48108:   24-block  1
        -:   25://            cout << data[i] << endl;
        -:   26:        }
     8020:   27:        std::size_t const    data_len = sizeof( data ) / sizeof( data[0] );
     8020:   28:        boost::crc_basic<16>  crc_ccitt1( 0x1021, 0xFFFF, 0, false, false );
     8020:   28-block  0
call    0 returned 8020
     8020:   29:        crc_ccitt1.process_bytes( data, data_len );
call    0 returned 8020
branch  1 taken 8020 (fallthrough)
branch  2 taken 0 (throw)
     8020:   30:        uint16_t res = crc_ccitt1.checksum();
     8020:   30-block  0
call    0 returned 8020
branch  1 taken 8020 (fallthrough)
branch  2 taken 0 (throw)
     8020:   31:        return res;
     8020:   31-block  0
     8020:   31-block  1
        -:   32:    }
        -:   33:
function _ZN3crc3crc11brute_forceB5cxx11Et called 16 returned 100% blocks executed 70%
       16:   34:    pair<string, bool> crc::brute_force(uint16_t hash_password){
       16:   35:        fstream fin("500-worst-passwords2.txt");
       16:   35-block  0
call    0 returned 16
call    1 returned 16
branch  2 taken 16 (fallthrough)
branch  3 taken 0 (throw)
       16:   36:        string candidate_pwd;
       16:   36-block  0
call    0 returned 16
       16:   37:        string res;
call    0 returned 16
       16:   38:        if (!fin.is_open()){
call    0 returned 16
branch  1 taken 16 (fallthrough)
branch  2 taken 0 (throw)
       16:   38-block  0
branch  3 taken 0 (fallthrough)
branch  4 taken 16
    #####:   39:            cout << "file doesn't open " << endl;
    %%%%%:   39-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   39-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   40:        }
     8032:   41:        while (getline(fin, candidate_pwd)){
       16:   41-block  0
     8032:   41-block  1
call    0 returned 8032
branch  1 taken 8032 (fallthrough)
branch  2 taken 0 (throw)
     8032:   41-block  2
call    3 returned 8032
branch  4 taken 8032 (fallthrough)
branch  5 taken 0 (throw)
     8032:   41-block  3
branch  6 taken 8016
branch  7 taken 16 (fallthrough)
     8016:   42:            if (calculate_crc(candidate_pwd) == hash_password){
     8016:   42-block  0
call    0 returned 8016
branch  1 taken 8016 (fallthrough)
branch  2 taken 0 (throw)
     8016:   42-block  1
call    3 returned 8016
branch  4 taken 8016 (fallthrough)
branch  5 taken 0 (throw)
     8016:   42-block  2
call    6 returned 8016
branch  7 taken 12 (fallthrough)
branch  8 taken 8004
    $$$$$:   42-block  3
call    9 never executed
    $$$$$:   42-block  4
        -:   43:
       12:   44:                res = candidate_pwd;
       12:   44-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
        -:   45:            }
        -:   46:        }
       16:   47:        bool pwd_exist = false;
       16:   48:        if (!res.empty()) pwd_exist = true;
       16:   48-block  0
call    0 returned 16
branch  1 taken 12 (fallthrough)
branch  2 taken 4
       12:   48-block  1
       32:   49:        return make_pair(res, pwd_exist);
       16:   49-block  0
call    0 returned 16
branch  1 taken 16 (fallthrough)
branch  2 taken 0 (throw)
       16:   49-block  1
       16:   50:    }
       16:   50-block  0
call    0 returned 16
call    1 returned 16
call    2 returned 16
    $$$$$:   50-block  1
call    3 never executed
    $$$$$:   50-block  2
call    4 never executed
    $$$$$:   50-block  3
call    5 never executed
        -:   51:};
        -:   52:
        -:   53:
        -:   54:
        -:   55:
        -:   56:
        -:   57:
        -:   58:
        -:   59:
        -:   60:
        -:   61:
        -:   62:
        -:   63:
        -:   64:
        -:   65:
        -:   66:
        -:   67:
        -:   68:
        -:   69:
        -:   70:
        -:   71:
        -:   72:
        -:   73:
        -:   74:
        -:   75:
        -:   76:
        -:   77:
        -:   78:
        -:   79:
        -:   80:
        -:   81://
        -:   82://
        -:   83://#include <boost/crc.hpp>      // for boost::crc_basic, boost::crc_optimal
        -:   84://#include <boost/cstdint.hpp>  // for boost::uint16_t
        -:   85://
        -:   86://#include <algorithm>  // for std::for_each
        -:   87://#include <cassert>    // for assert
        -:   88://#include <cstddef>    // for std::size_t
        -:   89://#include <iostream>   // for std::cout
        -:   90://#include <ostream>    // for std::endl
        -:   91://
        -:   92://
        -:   93://// Main function
        -:   94://int
        -:   95://main ()
        -:   96://{
        -:   97://    // This is "123456789" in ASCII
        -:   98://    unsigned char const  data[] = { 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
        -:   99://                                    0x38, 0x39 };
        -:  100://    std::size_t const    data_len = sizeof( data ) / sizeof( data[0] );
        -:  101://
        -:  102://    // The expected CRC for the given data
        -:  103://    boost::uint16_t const  expected = 0x29B1;
        -:  104://
        -:  105://    // Simulate CRC-CCITT
        -:  106://    boost::crc_basic<16>  crc_ccitt1( 0x1021, 0xFFFF, 0, false, false );
        -:  107://    crc_ccitt1.process_bytes( data, data_len );
        -:  108://    assert( crc_ccitt1.checksum() == expected );
        -:  109://
        -:  110://    // Repeat with the optimal version (assuming a 16-bit type exists)
        -:  111://    boost::crc_optimal<16, 0x1021, 0xFFFF, 0, false, false>  crc_ccitt2;
        -:  112://    crc_ccitt2 = std::for_each( data, data + data_len, crc_ccitt2 );
        -:  113://    assert( crc_ccitt2() == expected );
        -:  114://
        -:  115://    std::cout << "All tests passed." << std::endl;
        -:  116://    return 0;
        -:  117://}
        -:  118:
